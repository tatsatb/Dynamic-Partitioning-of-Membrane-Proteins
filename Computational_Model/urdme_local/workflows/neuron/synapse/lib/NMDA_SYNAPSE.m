function [REAC,SPEC,RATE] = NMDA_SYNAPSE(umod)
%   NMDA_SYNAPSE builder.
%
%   Syntax [REAC,SPEC,RATE] = NMDA_SYNAPSE or UMOD =
%   NMDA_SYNAPSE(UMOD).

%   Taken from 
%   https//senselab.med.yale.edu/modeldb/showModel.cshtml?model=145836&file=/MoradiEtAl2012/SynNMDA10_1.mod#tabs-2

% S. Engblom 2019-11-29 (Revision)

% UNITS {
% 	(nA) = (nanoamp)
% 	(mV) = (millivolt)
% 	(pS) = (picosiemens)
% 	(uS) = (microsiemens)
% 	(umho) = (micromho)
% 	(mM) = (milli/liter)
% 	(uM) = (micro/liter)
% }

RATE = {'Rb' 10	...
        'Ru' 5.6e-3 ...
	'Ro' 10e-3 ...
        'Rc' 273e-3 ...
        'Rd1' 2.2e-3 ...
        'Rr1' 1.6e-3 ...
        'Rd2' 0.43e-3 ...
        'Rr2' 0.5e-3 ...
        'mg'  1 ...
        'Rmb' 0.05 ...
        'Rmu' 12800e-3 ...
        'Rmc1b' 0.00005 ...
        'Rmc1u' 2.438312e-3 ...
        'Rmc2b' 0.00005 ...
        'Rmc2u' 5.041915e-3 ...
        'Rmd1b' 0.00005 ...
        'Rmd1u' 2.98874e-3 ...
        'Rmd2b' 0.00005 ...
        'Rmd2u' 2.953408e-3 ...
        'RbMg' 10 ...
        'RuMg' 17.1e-3 ...
        'RoMg' 10e-3 ...
        'RcMg' 548e-3 ...
        'Rd1Mg' 2.1e-3 ...
        'Rr1Mg' 0.87e-3 ...
        'Rd2Mg' 0.26e-3 ...
        'Rr2Mg' 0.42e-3 ...
        'v'     'ldata' ... % (note: input via ldata)
        'T'     'ldata' ... % (transmitter T is shared with AMPA)
       };

SPEC = {'U' ...		% unbound
        'Cl' ...	% closed
        'NMDA_D1' ...	% desensitised 1
        'NMDA_D2' ...	% desensitised 2
        'NMDA_O' ...	% open
        'UMg' ...	% unbound with Mg
        'ClMg' ...	% closed with Mg
        'D1Mg' ...	% desensitised 1 with Mg
        'D2Mg' ...	% desensitised 2 with Mg
        'OMg' ...	% open with Mg
       };

% Supporting functions (NMDAfun.h and NMDAfun.c)
%
% rmb(v) = exp((v-40) * valence * memb_fraction /25)
% rmu(v) = exp(-(v-40) * valence * (1-memb_fraction) /25)
%
% where
%
% valence = -2;
% memb_fraction = 0.8;

%   Reactions
%
%   U <-> Cl	        (rb,Ru)
%   Cl <-> NMDA_O	(Ro,Rc)
%   Cl <-> NMDA_D1	(Rd1,Rr1)
%   NMDA_D1<-> NMDA_D2	(Rd2,Rr2)
%
%   NMDA_O <-> OMg	(rmb,rmu)
%   UMg <-> ClMg 	(rbMg,RuMg)
%   ClMg <-> OMg 	(RoMg,RcMg)
%   ClMg <-> D1Mg       (Rd1Mg,Rr1Mg)
%
%   D1Mg <-> D2Mg       (Rd2Mg,Rr2Mg)
%   U <-> UMg           (rmc1b,rmc1u)
%   Cl <-> ClMg	        (rmc2b,rmc2u)
%   NMDA_D1<-> D1Mg	(rmd1b,rmd1u)
%   NMDA_D2 <-> D2Mg	(rmd2b,rmd2u)
REAC = {'U > Rb*T * U > Cl' ...
        'Cl > Ru * Cl > U' ...
        'Cl > Ro * Cl > NMDA_O' ...
        'NMDA_O > Rc * NMDA_O > Cl' ...
        'Cl > Rd1* Cl > NMDA_D1' ...
        'NMDA_D1> Rr1 * NMDA_D1> Cl' ...
        'NMDA_D1> Rd2 * NMDA_D1> NMDA_D2' ...
        'NMDA_D2 > Rr2 * NMDA_D2 > NMDA_D1' ...
        ...
        'NMDA_O > Rmb*mg*rmb(v) * NMDA_O > OMg' ...
        'OMg > Rmu*rmu(v) * OMg > NMDA_O' ...
        'UMg > RbMg*T * UMg > ClMg' ...
        'ClMg > RuMg * ClMg > UMg' ...
        'ClMg > RoMg * ClMg > OMg' ...
        'OMg > RcMg * OMg > ClMg' ...
        'ClMg > Rd1Mg * ClMg > D1Mg' ...
        'D1Mg > Rr1Mg * D1Mg > ClMg' ...
        ...
        'D1Mg > Rd2Mg * D1Mg > D2Mg' ...
        'D2Mg > Rr2Mg * D2Mg > D1Mg' ...
        'U > Rmc1b*mg*rmb(v) * U > UMg' ...
        'UMg > Rmc1u*rmu(v) * UMg > U' ...
        'Cl > Rmc2b*mg*rmb(v) * Cl > ClMg' ...
        'ClMg > Rmc2u*rmu(v) * ClMg > Cl' ...
        'NMDA_D1> Rmd1b*mg*rmb(v) * NMDA_D1 > D1Mg' ...
        'D1Mg > Rmd1u*rmu(v) * D1Mg > NMDA_D1' ...
        'NMDA_D2 > Rmd2b*mg*rmb(v) * NMDA_D2 > D2Mg' ...
        'D2Mg > Rmd2u*rmu(v) * D2Mg > NMDA_D2' ...
       };

if nargin > 0
  if nargout <= 1
    umod = rparse(REAC,SPEC,RATE,'synapse/lib/NMDA_prop.c');
    % additional small library included
    rparse_include('synapse/lib/AMPA_NMDAprop.c','#include "NMDAfun.h"');
    umod.makeargs = {'source' 'synapse/lib/NMDAfun.c'};
    REAC = umod;
  else
    error('Unknown syntax.');
  end
end
