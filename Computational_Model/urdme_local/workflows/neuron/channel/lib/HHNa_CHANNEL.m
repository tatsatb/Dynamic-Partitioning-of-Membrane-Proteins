function [REAC,SPEC,RATE] = HHNa_CHANNEL
%   HHNa_CHANNEL builder.
%
%   Syntax [REAC,SPEC,RATE] = HHNa_CHANNEL or UMOD =
%   HHNa_CHANNEL(UMOD).

% S. Engblom 2019-12-02 (Revision, previously ionprops.m)
% S. Engblom 2018-06-27 (Revision)
% A. Senek 2017-05-31

RATE = {'v' 'ldata'}; % (note: input via ldata)

SPEC = {'Na0' 'Na1' 'Na2' 'Na3' 'Na4' 'Na5' 'Na6' 'Na7'};

% Supporting functions (HHNafun.h and HHNafun.c)
REAC = {'Na0 > 1 * HHNa_alpha2(v) * Na0 > Na1' ...
        'Na0 > 3 * HHNa_alpha1(v) * Na0 > Na2' ...
        'Na1 > 1 * HHNa_beta2(v) * Na1  > Na0' ...
        'Na1 > 3 * HHNa_alpha1(v) * Na1 > Na3' ...
        'Na2 > 1 * HHNa_beta1(v) * Na2  > Na0' ...
        'Na2 > 1 * HHNa_alpha2(v) * Na2 > Na3' ...
        'Na2 > 2 * HHNa_alpha1(v) * Na2 > Na4' ...
        'Na3 > 1 * HHNa_beta1(v) * Na3  > Na1' ...
        'Na3 > 1 * HHNa_beta2(v) * Na3  > Na2' ...
        'Na3 > 2 * HHNa_alpha1(v) * Na3 > Na5' ...
        'Na4 > 2 * HHNa_beta1(v) * Na4  > Na2' ...
        'Na4 > 1 * HHNa_alpha2(v) * Na4 > Na5' ...
        'Na4 > 1 * HHNa_alpha1(v) * Na4 > Na6' ...
        'Na5 > 2 * HHNa_beta1(v) * Na5  > Na3' ...
        'Na5 > 1 * HHNa_beta2(v) * Na5  > Na4' ...
        'Na5 > 1 * HHNa_alpha1(v) * Na5 > Na7' ...
        'Na6 > 3 * HHNa_beta1(v) * Na6  > Na4' ...
        'Na6 > 1 * HHNa_alpha2(v) * Na6 > Na7' ...
        'Na7 > 3 * HHNa_beta1(v) * Na7  > Na5' ...
        'Na7 > 1 * HHNa_beta2(v) * Na7  > Na6' ...
        };

if nargin > 0
  if nargout <= 1
    umod = rparse(REAC,SPEC,RATE,'channel/lib/HHNa_prop.c');
    % additional small library included
    rparse_include('channel/lib/HHNa_prop.c','#include "HHNafun.h"');
    umod.makeargs = {'source' 'channel/lib/HHNafun.c'};
    REAC = umod;
  else
    error('Unknown syntax.');
  end
end
